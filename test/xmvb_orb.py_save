#!/usr/bin/env python3
import re
import sys
import os

class Orb:
    def __init__(self, zeta : int=0, coeffs : list[list[float]]=[], indices : list[list[int]]=[], numatoms : list(list([int]))=[]):
        self.zeta = zeta
        self.coeffs = coeffs
        self.indices = indices
        self.numatoms = numatoms

def readorb(file_name):
    all_coeffs = []
    all_aos = []
    coef=[]
    ao=[]
    iom=0
    with open(file_name, 'r') as file:
      noa = []
      for  line in file:
          values = []
          if ("#" in line):
             if iom > 0:
                 all_coeffs.append(coef)
                 all_aos.append(ao)
                 #print(iom,'zz',len(all_coeffs),all_aos,all_coeffs)
                 iom+=1
                 coef=[]
                 ao=[]
             else:
                 iom+=1

          if not("#" in line):
             values=line.split()
             if iom==0:
                 noa.append(values)
             else:
                 #print("||",values[0], len(values))
                 toread=len(values)//2
                 for i in range(toread):
                 #   print(i,end='')
                    coef.append(float(values[2*i]))  # add the last to vectors
                    ao.append(int(values[2*i+1]))

      # last orb must be updated

    all_coeffs.append(coef)
    all_aos.append(ao)
    #print('rr',len(all_coeffs),all_aos,all_coeffs)
    return all_coeffs, all_aos


def make_numatoms(aos, zeta):
    numatoms = []
    zeta = int(zeta)
    for i in range(0, len(aos), 1):
        nums = []
        if zeta == 1:
            for j in range (0, len(aos[i]), 1):
                nums.append(aos[i][j])
            numatoms.append(nums)
        else:
            for j in range (0, len(aos[i]), zeta):
                num = aos[i][j+zeta-1]//zeta
                nums.append(num)
            numatoms.append(nums)
    return numatoms


def change_zeta_coeffs(orb_data, new_zeta):
    new_zeta = int (new_zeta)
    old_zeta = int(orb_data.zeta)
    old_coeffs = orb_data.coeffs
    #print (old_coeffs)
    new_coeffs = []
    print(f"Old Zeta : {old_zeta}",f"New Zeta : {new_zeta}")
    if new_zeta == old_zeta:
        print("The orbital data is already in the desired format.")
        return orb_data
    if new_zeta > old_zeta:
        for i in range (0, len(old_coeffs), 1):
            compteur = 0
            stock = []
            for j in range (0, len (old_coeffs[i]), 1):
                if compteur == old_zeta:
                    while compteur < new_zeta:
                        stock.append(0.00)
                        compteur += 1
                    stock.append(old_coeffs[i][j])
                    compteur = 1
                else:
                    stock.append(old_coeffs[i][j])
                    compteur += 1
            stock.append(0.00)
            new_coeffs.append(stock)
    if new_zeta < old_zeta:
        for i in range (0, len(old_coeffs), 1):
            boucle = 0
            compteur = 0
            while boucle < len(old_coeffs[i]):
                while compteur != new_zeta:
                    stock.append(old_coeffs[i][boucle])
                    compteur += 1
                    boucle += 1
                compteur = 0
                boucle += old_zeta - new_zeta
            new_coeffs.append(stock)
    return new_coeffs

def change_zeta_aos(orb_data, new_zeta):
    new_zeta = int (new_zeta)
    numatoms = orb_data.numatoms
    new_aos = []
    for i in range (0, len(numatoms), 1):
        stock = []
        for j in range (0, len(numatoms[i]), 1):
            for k in range (1, new_zeta+1, 1):
                stock.append(new_zeta*(numatoms[i][j]-1)+k)
            #print (stock)
        new_aos.append(stock)
    return new_aos


def symm_numatoms(file_path,orb_data):
    numatoms = orb_data.numatoms
    new_numatoms = []
    with open(file_path) as f:
        for line in f:
            numbers = line.split()
            for i in range(0, len(numatoms), 1):
                new_num = []
                for j in range (0, len(numatoms[i]), 1):
                    new_num.append(0)
                for k in range(0, len(numbers), 1):
                    num1 = k+1
                    num2 = numbers[k]
                    for l in range(0, len(numatoms[i]), 1):
                        if numatoms[i][l] == int(num1):
                            new_num[l] = int(num2)
                        #elif numatoms[i][l] == int(num2):
                            #new_num[l] = int(num1)
                new_numatoms.append(new_num)
    return new_numatoms

def write_new_indices(numatoms,zeta):
    zeta = int(zeta)
    new_indices = []
    for i in range (0, len(numatoms), 1):
        indi = []
        for l in range (0, len(numatoms[i]), 1):
            for k in range(1, zeta+1, 1):
                indi.append(zeta*(numatoms[i][l]-1)+k)  
        new_indices.append(indi)
    #print (new_indices)
    return new_indices  

def write_orb_file(filename, coeffs, indices):
    #new_orb_values = new_orb_data.coeffs
    #new_indices = new_orb_data.indices
    #print (coeffs)
    with open(filename, 'w') as f: 
        for i in range(len(indices)):
            f.write(f"{len(coeffs[i]):4d}")
        f.write("\n")
        for i in range(len(indices)):
            f.write(f"# ORBITAL {i+1:4d}  NAO = {len(coeffs[i]):4d}\n")
            count = 0   
            for j in range(len(coeffs [i])):
                f.write(f"{coeffs[i][j]:13.10f}{(indices[i][j]):4d}  ")
                count += 1
                if (j+1) % 4 == 0 and j != len(coeffs[i])-1:
                    f.write("\n")
            f.write("\n")


#function which allows the user to input the name of the file to be read
def get_file_extension(file_name):
    fname, extension = os.path.splitext(file_name)
    return fname, extension

#Core function which does the job
def main(input_file, zeta, new_zeta, sym):   
    input_file_name, input_file_ext = get_file_extension(input_file)
    #print(input_file_name, input_file_ext)
    if input_file_ext == ".orb":
        #Create a new blank output file with the same name as the input file added with a suffix containing new_zeta
        output_file = input_file_name + f"_zeta{new_zeta}{sym}.orb"
        coeffs, indices = readorb(input_file)
        #print (coeffs)
        numatoms = make_numatoms(indices, zeta)
        #print (numatoms)
        orb_data = Orb(zeta, coeffs, indices, numatoms)
        #print ("c",orb_data.coeffs[1])
        if sym is not None:
            new_numatoms = symm_numatoms(sym, orb_data)
            new_indices = write_new_indices(new_numatoms, zeta)
            orb_data = Orb(zeta, coeffs, new_indices, new_numatoms)
        if new_zeta is not None and new_zeta != zeta:
            new_coeffs = change_zeta_coeffs(orb_data, new_zeta)
            #print (new_coeffs)
            new_aos = change_zeta_aos(orb_data, new_zeta)
            #print (new_aos)
            orb_data = Orb(new_zeta, new_coeffs, new_aos, numatoms)
        write_orb_file(output_file, orb_data.coeffs, orb_data.indices)
    else:
        print("The input file must be a .orb file.")
    return output_file

#OK

if __name__ == "__main__": # permet d'utiliser comme une librairie qu'on importe

   if len(sys.argv) == 2:
       zeta=1
       numatoms=[]
       input_file = sys.argv[1]
       input_file_name, input_file_ext = get_file_extension(input_file)
       print(input_file_name, input_file_ext)
       coeffs, indices = readorb(input_file)
       output_file=input_file_name+".neworb"
       orb_data = Orb(zeta, coeffs, indices, numatoms)
       write_orb_file(output_file, orb_data.coeffs, orb_data.indices)
       sys.exit() 
   if len(sys.argv) == 4:
       file = sys.argv[1]
       if sys.argv[2] .isdigit():
           zeta = sys.argv[2]
           new_zeta = sys.argv[3]
           symmetry = None
       else:
           zeta = sys.argv[2]
           symmetry = sys.argv[2]
           new_zeta = None
       output_file = main(file, zeta, new_zeta, symmetry)
       print (f"New file {output_file} created.")
   elif len(sys.argv) == 5:
       file = sys.argv[1]
       zeta = sys.argv[2]
       new_zeta = sys.argv[3]
       symmetry = sys.argv[4]
       output_file = main(file, zeta, new_zeta, symmetry)
       print (f"New file {output_file} created.")
   else:
       print("No argument provided. Please provide an argument.")
       print("Usage: python3 xmvbtz.py <input_file> <zeta> <new_zeta> <symmetry>")
       print("Example: python3 xmvbtz.py Tetra_1_1.orb 3 4 sym.txt")
       print("Example: python3 xmvbtz.py Tetra_1_1.orb 3 4")
       print("sym.txt is a file containing the symmetry of the molecule. It is optional.")
       print("If sym.txt is not provided, the program will only change the zeta value.")
       print("Example of sym.txt : 4 3 2 1")
       print("The first number is the new atom number for the atom number 1. The second number is the new atom number for the atom number 2.")
